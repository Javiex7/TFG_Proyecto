version: '3'

volumes:
  db_postgres_data:

services:
  db:
    container_name: db_postgres
    image: postgres:13.0-alpine
    volumes:
      - db_postgres_data:/var/lib/postgresql/data:Z
    ports:
      - "5432:5432"
    env_file:
      - ./tfg/.env

  django:
    container_name: backend_django
    build:
      context: .
      dockerfile: ./Dockerfile
    image: backend_django
    volumes:
      - .:/app:z
    ports:
      - "8050:8040"
    depends_on:
      - db

  frontend:
    container_name: frontend
    restart: always
    build:  
      context: ./tfg_front
      dockerfile: Dockerfile
    image: vue_frontend
    depends_on:
      - django
    volumes:
      - ./tfg_front/nginx:/etc/nginx/conf.d
    ports:
      - 81:8050
    

# App environment -> Prepare the vue.js build
FROM node:lts-alpine as vue-build
WORKDIR /app
ENV PATH /app/node_modules/.bin:$PATH
COPY package.json ./
RUN npm i --silent
COPY . ./

RUN npm run build

# Server environment -> Deploying NGINX build
FROM nginx:1.21

FROM alpine:latest
RUN apk update && apk upgrade
RUN apk add wget

RUN rm -rf /var/lib/apt/lists/*
RUN rm -rf /usr/share/nginx/html/*

COPY --from=vue-build /app/nginx/nginx.conf /etc/nginx/conf.d/default.conf:ro
COPY --from=vue-build /app/dist /usr/share/nginx/html



server {
    listen 80;
    server_name _;
    server_tokens off;
    client_max_body_size 20M;

    location / {
        root usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }

    location /cache {
        try_files $uri @proxy_api;
    }

    location @proxy_api { # Define routes to be directed to backend as proxy
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header X-Url-Scheme $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        proxy_pass http://django:8050;
    }
    error_log /var/log/nginx/nginx.error_log warn;
}